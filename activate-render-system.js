/**
 * Script de Activaci√≥n - Sistema Persistente PLAYTEST en Render
 * Configura autom√°ticamente el sistema para funcionar en Render.com
 */

const fs = require('fs');
const path = require('path');

class RenderSystemActivator {
    constructor() {
        this.frontendFiles = [
            'index.html',
            'all-blocks.html',
            'game-trivial.html',
            'game-classic.html',
            'game-duel.html',
            'admin-principal-panel.html',
            'admin-secundario-panel.html'
        ];
        
        this.renderBackendURL = 'https://playtest-backend.onrender.com';
        this.persistentScript = '<script type="module" src="persistent-system-init.js"></script>';
    }
    
    async activateSystem() {
        console.log('üöÄ Activando Sistema Persistente para Render...');
        console.log('='.repeat(60));
        
        try {
            // 1. Verificar archivos del sistema persistente
            await this.verifyPersistentFiles();
            
            // 2. Actualizar archivos HTML principales
            await this.updateHTMLFiles();
            
            // 3. Crear archivo de configuraci√≥n para Render
            await this.createRenderConfig();
            
            // 4. Generar documentaci√≥n de despliegue
            await this.generateDeploymentDocs();
            
            console.log('\n‚úÖ Sistema activado exitosamente!');
            console.log('\nüìã Pr√≥ximos pasos:');
            console.log('1. Subir el c√≥digo a GitHub');
            console.log('2. Conectar el repositorio en Render.com');
            console.log('3. Usar render.yaml para configuraci√≥n autom√°tica');
            console.log('4. Esperar el despliegue autom√°tico');
            console.log('\nüåê El sistema funcionar√° autom√°ticamente en Render!');
            
        } catch (error) {
            console.error('‚ùå Error activando sistema:', error);
            throw error;
        }
    }
    
    async verifyPersistentFiles() {
        console.log('1. üîç Verificando archivos del sistema persistente...');
        
        const requiredFiles = [
            'persistent-system-init.js',
            'persistent-api-service.js',
            'feature-flags-api-persistent.js',
            'data-migration-client.js',
            'playtest-backend/server.js',
            'playtest-backend/render.yaml'
        ];
        
        let allFilesExist = true;
        
        for (const file of requiredFiles) {
            const filePath = path.join(__dirname, file);
            if (fs.existsSync(filePath)) {
                console.log(`   ‚úÖ ${file}`);
            } else {
                console.log(`   ‚ùå ${file} - FALTANTE`);
                allFilesExist = false;
            }
        }
        
        if (!allFilesExist) {
            throw new Error('Archivos requeridos del sistema persistente no encontrados');
        }
        
        console.log('   ‚úÖ Todos los archivos del sistema persistente est√°n presentes');
    }
    
    async updateHTMLFiles() {
        console.log('\n2. üìù Actualizando archivos HTML...');
        
        for (const htmlFile of this.frontendFiles) {
            const filePath = path.join(__dirname, htmlFile);
            
            if (!fs.existsSync(filePath)) {
                console.log(`   ‚ö†Ô∏è ${htmlFile} - No encontrado, omitiendo`);
                continue;
            }
            
            try {
                let content = fs.readFileSync(filePath, 'utf8');
                
                // Verificar si ya tiene el script persistente
                if (content.includes('persistent-system-init.js')) {
                    console.log(`   ‚úÖ ${htmlFile} - Ya tiene sistema persistente`);
                    continue;
                }
                
                // Buscar donde insertar el script (antes del </head> o antes del primer script)
                let insertPoint = content.indexOf('</head>');
                if (insertPoint === -1) {
                    insertPoint = content.indexOf('<script');
                }
                
                if (insertPoint !== -1) {
                    const beforeInsert = content.substring(0, insertPoint);
                    const afterInsert = content.substring(insertPoint);
                    
                    const newContent = beforeInsert + 
                        '    <!-- Sistema Persistente PLAYTEST -->\n' +
                        '    ' + this.persistentScript + '\n\n' +
                        afterInsert;
                    
                    // Hacer backup del archivo original
                    fs.writeFileSync(filePath + '.backup', content);
                    
                    // Escribir archivo actualizado
                    fs.writeFileSync(filePath, newContent);
                    
                    console.log(`   ‚úÖ ${htmlFile} - Actualizado con sistema persistente`);
                } else {
                    console.log(`   ‚ö†Ô∏è ${htmlFile} - No se pudo encontrar punto de inserci√≥n`);
                }
                
            } catch (error) {
                console.log(`   ‚ùå ${htmlFile} - Error: ${error.message}`);
            }
        }
    }
    
    async createRenderConfig() {
        console.log('\n3. üîß Creando configuraci√≥n para Render...');
        
        // Crear archivo de variables de entorno para referencia
        const envExample = `# Variables de Entorno para Render
# Configurar estas en el dashboard de Render.com

NODE_ENV=production
PORT=3000
JWT_SECRET=<GENERAR_AUTOMATICAMENTE>
DATABASE_URL=<CONECTAR_POSTGRESQL>

# CORS Origins (configurar seg√∫n tu dominio)
FRONTEND_URL=https://tu-frontend.onrender.com

# Base de datos
DB_NAME=playtest_db
DB_USER=playtest_user
`;
        
        fs.writeFileSync(path.join(__dirname, 'render.env.example'), envExample);
        console.log('   ‚úÖ render.env.example creado');
        
        // Verificar render.yaml en backend
        const renderYamlPath = path.join(__dirname, 'playtest-backend', 'render.yaml');
        if (fs.existsSync(renderYamlPath)) {
            console.log('   ‚úÖ render.yaml encontrado en playtest-backend');
        } else {
            console.log('   ‚ö†Ô∏è render.yaml no encontrado - creando...');
            
            const renderYaml = `services:
  - type: web
    name: playtest-backend
    env: node
    plan: free
    buildCommand: npm install && node simple-persistence-migration.js
    startCommand: npm start
    envVars:
      - key: NODE_ENV
        value: production
      - key: JWT_SECRET
        generateValue: true
      - key: DATABASE_URL
        fromDatabase:
          name: playtest-db
          property: connectionString
  - type: pserv
    name: playtest-db
    env: postgresql
    plan: free
    databaseName: playtest_db
    databaseUser: playtest_user`;
            
            fs.writeFileSync(renderYamlPath, renderYaml);
            console.log('   ‚úÖ render.yaml creado');
        }
    }
    
    async generateDeploymentDocs() {
        console.log('\n4. üìö Generando documentaci√≥n de despliegue...');
        
        const deploymentGuide = `# üöÄ Gu√≠a de Despliegue en Render - PLAYTEST

## ‚úÖ Sistema Activado y Listo

El sistema persistente ha sido configurado autom√°ticamente. Todos los archivos HTML principales
ahora incluyen el sistema persistente que funcionar√° autom√°ticamente en Render.

## üìã Pasos para Desplegar

### 1. Subir a GitHub
\`\`\`bash
git add .
git commit -m "Activar sistema persistente para Render"
git push origin main
\`\`\`

### 2. Configurar en Render.com

1. **Crear nuevo Web Service**
   - Conectar tu repositorio GitHub
   - Directorio ra√≠z: \`playtest-backend\`
   - Usar \`render.yaml\` para configuraci√≥n autom√°tica

2. **Variables de Entorno** (Se configuran autom√°ticamente via render.yaml)
   - \`NODE_ENV\`: production
   - \`JWT_SECRET\`: Se genera autom√°ticamente
   - \`DATABASE_URL\`: Se conecta autom√°ticamente a PostgreSQL

3. **Base de Datos PostgreSQL**
   - Se crea autom√°ticamente con \`render.yaml\`
   - Nombre: \`playtest-db\`
   - Usuario: \`playtest_user\`

### 3. Configurar Frontend (Opcional)

Si quieres servir el frontend desde Render tambi√©n:

1. Crear otro Web Service para frontend
2. Usar archivos HTML actualizados
3. Configurar Static Site

### 4. URLs Resultantes

- **Backend**: \`https://playtest-backend.onrender.com\`
- **Frontend**: \`https://tu-frontend.onrender.com\` (si lo despliegas)

## üîß Configuraci√≥n Autom√°tica

### Backend
- ‚úÖ Todas las rutas API funcionando
- ‚úÖ PostgreSQL conectado autom√°ticamente
- ‚úÖ Migraci√≥n de tablas ejecutada al iniciar
- ‚úÖ CORS configurado para frontend

### Frontend
- ‚úÖ Sistema persistente incluido en archivos HTML
- ‚úÖ Detecci√≥n autom√°tica de URL de Render
- ‚úÖ Migraci√≥n autom√°tica de localStorage
- ‚úÖ Fallback a localStorage si falla API

## üéØ Funcionalidades Activas

Una vez desplegado, tendr√°s:
- ‚úÖ **Persistencia real** en PostgreSQL
- ‚úÖ **Feature flags** administrables
- ‚úÖ **Preferencias de usuario** persistentes
- ‚úÖ **Estados de juego** guardados autom√°ticamente
- ‚úÖ **Analytics** y m√©tricas
- ‚úÖ **Sistema de migraci√≥n** autom√°tico

## üîç Verificaci√≥n Post-Despliegue

1. Visitar: \`https://tu-backend.onrender.com/health\`
2. Debe retornar: \`{"status": "OK", "timestamp": "..."}\`
3. Verificar logs en Render dashboard
4. Probar login y funcionalidades b√°sicas

## ‚ö° Caracter√≠sticas del Sistema

- **Auto-detecci√≥n**: El sistema detecta autom√°ticamente si est√° en Render
- **Migraci√≥n transparente**: Los usuarios no notan cambios
- **Fallback inteligente**: Funciona aunque falle PostgreSQL temporalmente
- **Cache inteligente**: Reduce llamadas API innecesarias
- **Monitoreo integrado**: Logs y analytics autom√°ticos

¬°El sistema est√° completamente listo para producci√≥n en Render! üéâ
`;

        fs.writeFileSync(path.join(__dirname, 'RENDER_DEPLOYMENT.md'), deploymentGuide);
        console.log('   ‚úÖ RENDER_DEPLOYMENT.md creado');
    }
}

// Ejecutar activaci√≥n si se llama directamente
if (require.main === module) {
    const activator = new RenderSystemActivator();
    
    activator.activateSystem()
        .then(() => {
            console.log('\nüéâ ¬°Sistema activado exitosamente para Render!');
            process.exit(0);
        })
        .catch(error => {
            console.error('\nüí• Error activando sistema:', error);
            process.exit(1);
        });
}

module.exports = RenderSystemActivator;